#!/bin/bash
## Terraform configuration setup
## and initialization
## Author: Giovanni Giorgi

# Stop at first error:
set  -eu -o pipefail

cd $(dirname $0)/terraform-config
SCRIPT_DIR=$(pwd)

if [ $# == 0 ]; then
  echo Usage:
  echo  freezer config_name
  echo Where config_name can be one of
  for e in *-config.sh ; do
    echo -n ${e/-config.sh/} " "
  done
  exit 1
fi

CONFIG_NAME=$1
TERRAFORM_MACRO_MODULES=${SCRIPT_DIR}/../icicles
TERRAFORM_STATE_HOME=${SCRIPT_DIR}/../terraform-states

# Build the config
set -u
source ${CONFIG_NAME}-config.sh

varCheck(){
  for v in $@ ; do
    test -v $v || {
      echo Mandatory Variable $v not found on ${CONFIG_NAME}-config.sh
      echo Tfset mandatory variables: $@
      exit 5000
    }
  done
}

varCheck docker_server

# Now we scan only the FIRST level directory of TERRAFORM_MACRO_MODULES
for terraform_dir in $TERRAFORM_MACRO_MODULES/*/; do
    ( 
        cd $terraform_dir/
        MACRO_MODULE_NAME=$(basename $PWD)
        STATE_FILE_NAME=${MACRO_MODULE_NAME}-${CONFIG_NAME}.tfstate
        if [ ! -f $TERRAFORM_STATE_HOME/$STATE_FILE_NAME ] ; then
          echo Error cannot find computed state file
          echo $TERRAFORM_STATE_HOME/$STATE_FILE_NAME
          echo Creating empty one: remember to commit it as soon as possible
          touch $TERRAFORM_STATE_HOME/$STATE_FILE_NAME
          #exit 1
        fi
rm -f freezer-config*.tf

## ## ## ## ## ## ## ##
# No panic: it transform a : separated list in a terraform list
# devint:dev2 -> [ "devint","dev2" ]
set -u


cat >freezer-config-${CONFIG_NAME}.tf <<EOF

/* AUTO GENERATED BY $0 
 * DO NOT VERSION - DO NOT EDIT
 */

// See https://www.terraform.io/docs/providers/docker/index.html

provider "docker" {
  host="$docker_server"
  //version = "~> 3.10.0"
}


terraform {
  
  
}


terraform {
  required_providers {
    docker = {
      source = "terraform-providers/docker"
    }
  }
  backend "local" {
    path="../../terraform-states/${STATE_FILE_NAME}"
  }

  required_version = "= 0.13.3"
}


locals {
  // Can be used to  read other state files or to configure env-depenendent resources
  name_prefix = "${CONFIG_NAME}"  
  tf_git_version="$(git describe --always --all HEAD | tr -d \\n )"
}

EOF

        echo "Initializing ${STATE_FILE_NAME}"
        # Terraform init without questions
        # consider parallelizing it a bit        
        terraform init -reconfigure
    )
done
